#IS452 Final Programming Project#Nanzhu Liu 655394878#****Getting Start******#import pandas as pdimport csv#*******PART I************##load population txt fileinfile = open('data/pcen_v2015_y15_txt.txt', 'r')content = infile.readlines()infile.close()#select illinois dataillinois = []for x in content:    data = x.split('    ')    if '20152015717' in data[0]:    # first 2015 means series vintage, second 2015 means estimate year, 7 means data estimate month is July    # 17 means IL FIPS code    # collect all the data in IL        illinois.append(data)# check data# print(illinois[0:12])# length = len(illinois)# print(length)#select age from 0 to 10age0to10 = []for x in illinois:    if len(x[0].split()) == 2:    # to select age under 10. Use .split() == 2 because those data has a space in the list. Ages which is over 10 don't have a space in the list        x[0] = x[0][9:-2]        #the first 9 characters and the last 2 characters are not used, so I delete them. x[1] means the number of children.        x = ''.join(x)        #combine x[0] and x[1] into one string        age0to10.append(x)# check data# print(age0to10[0:12])# print(len(age0to10))# seperate FIPS code, age and numbers from one long string into three stringsrow = []for x in age0to10:    row.append(x.split())#select age from 0 to 5age0to5 = []# if tuple[1] in ['0', '1','2', '3', '4', '5'] which is equal to the for loop belowfor tuple in row:    if int(tuple[1]) <= 5:        age0to5.append(tuple)# check data# print("txt file", age0to5[0:5])#output the file into a csv file. Now the file contains only illinois data and age 0 to 5.outfile = open('result/pep.csv', 'w')csvout = csv.writer(outfile)csvout.writerows(age0to5)outfile.close()#read the csv file saved abovepep = pd.read_csv('result/pep.csv', header = None)#create an index by geoid and age togethergroup_byage = pep.groupby([0,1])#sum up the numbers by geoid and agetotal_byage = group_byage.sum().reset_index()#rename columnstotal_byage = total_byage.rename(columns = {0:'geoid', 1:'age', 2: 'number'})# check data# print(total_byage)# print(list(total_byage))#create an index only by geoid and caculate total number by geoidtotal = pep.groupby(0).sum().reset_index()#rename column geoid and totaltotal = total.rename(columns = {0:'geoid', 2: 'total'})# check data# print(total)# print(list(total))#merge the two tablesresult = pd.merge(total_byage, total, how='inner')# check data# print(result)#create a new data frame with geoid, age and percent columns#percent is calculated by number/totaldata = {'geoid' : result['geoid'],        'age' : result['age'],        'percent': result['number']/result['total']}result_w_percent = pd.DataFrame(data, columns = ['geoid','age','percent'])# reshape the frame to build a matrix.matrix = result_w_percent.pivot(index = 'geoid', columns = 'age', values = 'percent')# print(matrix)#export matrix into a csv filematrix.to_csv('result/matrix.csv')#*******PART II***********#import pandas as pd#get matrixmatrix = pd.read_csv('result/matrix.csv')matrix['geoid'] = matrix['geoid'].apply(str)# print(matrix['0'])# print(matrix.head())# print(type(matrix['geoid'][1]))#load files: B01001 is population filepopulation = pd.read_csv('data/ACS_15_5YR_B01001_with_ann.csv')#check type of population and data# print(type(population))# print(type(population['HD01_VD03'][1]))#select columnsgeoid = population['GEO.id']display = population.ix[:, 2]boy = population['HD01_VD03']girl = population['HD01_VD27']total = boy + girl#to combine the columns togethermy_data = [geoid, display, total]child = pd.concat(my_data, axis = 1 )#rename total column headerchild = child.rename(columns = {0:'population', 'GEO.display-label':'county'})#select county region, the county region code starts with 0500000region_code = '0500000' #--can be use as user inputchild = child[child['GEO.id'].str.contains(region_code)]geo = child['GEO.id']# print(len(geo))#call str method and apply a slice on GEO.id to keep the geoid same as in pep.child['geoid'] = child['GEO.id'].str[9:15]# print(len(child))# merge, the common attribute of child and matrix is geoiddetail_pop = pd.merge(child, matrix, on='geoid')#calculation# print(type(detail_pop.population[1])) --the type is str# print(type(detail_pop['0'][1]))--the type is str# convert str to intdetail_pop.population = detail_pop.population.apply(int)# print(type(detail_pop.population[1]))# covert float to int by using .astype(int)# caculate population of children age 0 to 5, so iterate 6 times.for i in range(6):    detail_pop['pop'+ str(i)]= (detail_pop.population* detail_pop[str(i)]).astype(int)# delete the matrix columnsdelete = ['0','1','2','3','4','5']detail_pop.drop(delete,inplace = True, axis = 1)#check the first 5 rows# print(detail_pop.head())#export to an excel file in result folderdetail_pop.to_csv('result/Population of Children Age 5 and Under.csv')# I create a function to do the race files since the steps are very similar with population file.# I define a function called estimationbyrace# There are 4 input variable: race, type, total and region_code# race is the input read from csv, type is racetype such as white, asian, black# total sums up female and male columns. The location of these two columns is not the same if the file type are different.# For example, the location of female and male columns in population file are different from race files.# This time the location of female and male are the same because they all race files.def estimationbyrace(race, type, total):    geoid = race['GEO.id']    display = race.ix[:, 2]    my_data = [geoid, display, total]    child = pd.concat(my_data, axis = 1 )    child = child.rename(columns = {0:type,'GEO.display-label':'county'})    region_code = '0500000'    child = child[child['GEO.id'].str.contains(region_code)]    # geo = child['GEO.id']    child['geoid'] = child['GEO.id'].str[9:15]    detail = pd.merge(child, matrix, on='geoid')    detail[type] = detail[type].apply(int)    for i in range(6):        detail[type + str(i)]= (detail[type]* detail[str(i)]).astype(int)    delete = ['0','1','2','3','4','5']    detail.drop(delete,inplace = True, axis = 1)    return detail# load file - B01001A is race: whitefile = pd.read_csv('data/ACS_15_5YR_B01001A_with_ann.csv')boy = file['HD01_VD03']girl = file['HD01_VD18']total = boy + girlracetype = 'white'#use the function created above to get the calcuated filedetail_white = estimationbyrace(file, racetype, total)# save the file in a seperate csv filedetail_white.to_csv('result/Population of Children Age 5 and Under-White.csv')# load file - B01001B is race: blackfile = pd.read_csv('data/ACS_15_5YR_B01001B_with_ann.csv')boy = file['HD01_VD03']girl = file['HD01_VD18']total = boy + girlracetype = 'black'#use the function created above to get the calcuated filedetail_black = estimationbyrace(file, racetype, total)# save the file in a seperate csv filedetail_black.to_csv('result/Population of Children Age 5 and Under-Black.csv')# load file - B01001C is race: American Indian and Alaska Nativefile = pd.read_csv('data/ACS_15_5YR_B01001C_with_ann.csv')boy = file['HD01_VD03']girl = file['HD01_VD18']total = boy + girlracetype = 'IndianAlaska'#use the function created above to get the calcuated filedetail_aian = estimationbyrace(file, racetype, total)# save the file in a seperate csv filedetail_aian.to_csv('result/Population of Children Age 5 and Under-AIAN.csv')#load files - B01001D is race: Asianfile = pd.read_csv('data/ACS_15_5YR_B01001D_with_ann.csv')boy = file['HD01_VD03']girl = file['HD01_VD18']total = boy + girlracetype = 'asian'#use the function created above to get the calcuated filedetail_asian = estimationbyrace(file, racetype, total)# save the file in a seperate csv filedetail_asian.to_csv('result/Population of Children Age 5 and Under-Asian.csv')#merge allrace = (detail_white, detail_black, detail_aian, detail_asian)for i in race:    i.drop(['GEO.id','county'], inplace = True, axis = 1)# detail_black.drop(['GEO.id','county'], inplace = True, axis = 1)# all = pd.merge(detail_pop, detail_white, detail_black, detail_aian, detail_asian, on='geoid')# all = pd.merge(detail_pop, detail_white, on='geoid')# all = pd.merge(all, detail_black, on='geoid')# all = pd.merge(all, detail_aian, on='geoid')# all = pd.merge(all, detail_asian, on='geoid')all = detail_popfor file in race:    all = pd.merge(all,file, on='geoid')all.to_csv('result/All.csv')